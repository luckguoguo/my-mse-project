<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx-3.0.xsd 
	http://www.springframework.org/schema/jee 
	http://www.springframework.org/schema/jee/spring-jee-3.0.xsd 
	http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop-3.0.xsd 
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context-3.0.xsd">

	<description>Spring Common Configuration</description>
	
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />
		<property name="ignoreResourceNotFound" value="true" />
		<property name="locations">
			<list>
				<value>classpath*:/application.properties</value>
			</list>
		</property>
	</bean>

	<!-- post-processors for all standard config annotations, includes JPA annotations -->
	<context:annotation-config />

	<!-- Use annotation auto register bean, and check if the properties with @Required, @Autowired have been injected -->
	<context:component-scan base-package="cn.edu.sjtu.petclinic.dao" />
	<context:component-scan base-package="cn.edu.sjtu.petclinic.service" />
	
	<!-- Exception translation bean post processor -->
	<!-- 
	<bean class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" />
	 -->
	
	<!-- This makes Spring perform the magic @PersistenceContext/@PersitenceUnit injection -->
	<bean class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor" />
	
	<!-- Data source configuration, used under development environment -->
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>

	<!-- Data source configuration, used under product environment -->
	<!-- <jee:jndi-lookup id="dataSource" jndi-name="java:comp/env/jdbc/PetClinicDB" /> -->

    <!-- The pet clinic entity manager factory pet clinic databases -->
    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="persistenceUnitName" value="PetClinicJPAPU" />
        <property name="dataSource" ref="dataSource" />
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
				<property name="showSql" value="${jpa.vender.hibernate.show_sql}" />
				<property name="generateDdl" value="${jpa.vender.hibernate.generateDdl}" />
			</bean>
		</property>
		<property name="jpaProperties">
			<props>
				<prop key="javax.persistence.validation.mode">none</prop>
			</props>
		</property>
    </bean>
    
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- Aop transaction -->
	<aop:config proxy-target-class="true">
		<aop:advisor pointcut="execution(* cn.edu.sjtu.petclinic.service.*.*(..))" advice-ref="txAdvice" />
		<aop:advisor pointcut="execution(* cn.edu.sjtu.petclinic.dao.*.*(..))" advice-ref="txAdvice" />
	</aop:config>
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="get*" read-only="true" />
			<tx:method name="find*" read-only="true" />
			<tx:method name="*" propagation="REQUIRED" rollback-for="Exception" />
		</tx:attributes>
	</tx:advice>
	
	<!-- 
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="false"/>
	 -->
	
	<!-- SpringContextHandler definition -->
	<bean class="cn.edu.sjtu.common.spring.SpringContextHolder" lazy-init="false"/>
	
	<!-- The other entity manager factory for other databases -->
	<!-- 
    <bean id="otherEntityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="persistenceUnitManager" ref="persistenceUnitManager" />
        <property name="persistenceUnitName" value="OtherJPAPU" />
        <property name="dataSource" ref="petClinicDataSource" />
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
				<property name="showSql" value="${jpa.vender.hibernate.show_sql}" />
				<property name="generateDdl" value="${jpa.vender.hibernate.generateDdl}" />
			</bean>
		</property>
    </bean>
    
    <bean id="otherTransactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="otherEntityManagerFactory" />
		<property name="dataSource" ref="petClinicDataSource" />
	</bean>
	
	<tx:annotation-driven transaction-manager="otherTransactionManager" proxy-target-class="true"/>
	 -->
	
</beans>